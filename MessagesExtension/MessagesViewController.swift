//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Jeff Lin on 19/09/2016.
//  Copyright Â© 2016 iPict. All rights reserved.
//

import UIKit
import Messages
import Firebase
import FirebaseStorage

class MessagesViewController: MSMessagesAppViewController {
    
    var ScreenWidth = UIScreen.main.bounds.size.width
    var ScreenHeight = UIScreen.main.bounds.size.height

    
//    @IBOutlet weak var testImage: UIImageView!
//    private let controller:GameController
//    required init?(coder aDecoder: NSCoder) {
//        controller = GameController()
//        super.init(coder: aDecoder)
//    }
    
    override func viewDidLoad() {
        super.viewDidLoad()

        if(FIRApp.defaultApp() == nil){
            FIRApp.configure()
        }
//      
//        controller.getDataFromUrl(image: testImage)
//        
//        let gameView = UIView(frame: CGRect(origin: CGPoint(x: 0,y :0), size: CGSize(width: ScreenWidth, height: ScreenHeight)))
//        self.view.addSubview(gameView)
//        controller.gameView = gameView
//        controller.dealRandomTile()

    
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        presentViewController(for: conversation, with: presentationStyle)
        
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        guard let conversation = activeConversation else { fatalError("Expected an active converstation") }
        
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    private func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
        print("UUID: " + conversation.localParticipantIdentifier.uuidString)
        var answer: String?
        let playerId = conversation.localParticipantIdentifier.uuidString
        let currentMessage = conversation.selectedMessage
        let messageURL = currentMessage?.url
        if (messageURL != nil) {
            let urlComponents = NSURLComponents(url: messageURL!, resolvingAgainstBaseURL: false)
            let queryItems = urlComponents?.queryItems

            for item in queryItems! {
                if item.name == "Answer" {
                    answer = item.value
                }
            }
            print(answer)
        }
        
        // Determine the controller to present.
        let controller: UIViewController
        
        if presentationStyle == .compact {
            //show play game view
            controller = instantiateStartViewController()
            
            //show current image from board
        }
        else {
            //send around playerId array
            //display the gameView 
            //if conversation.selectedMessage playerId is not equal to conversation.localParticipantIdentifier.uuidString
            //gameView can be draggable
            //else gameView is not draggable
            if (messageURL != nil) {
                controller = instantiateGameViewController(with: playerId, answer: answer!)
            } else {
                controller = instantiateSendPicViewController(with: playerId)
            }
            
            
            
            
//            let board = Board(message: conversation.selectedMessage) ?? Board()

        }
        
//        // Remove any existing child controllers.
        for child in childViewControllers {
            child.willMove(toParentViewController: nil)
            child.view.removeFromSuperview()
            child.removeFromParentViewController()
        }
//
//        // Embed the new controller.
        addChildViewController(controller)
//
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)

        controller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        controller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        controller.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
        controller.didMove(toParentViewController: self)
    }
    
    func instantiateStartViewController() -> UIViewController {
        // Instantiate a `StartViewController` and present it.
        guard let controller = storyboard?.instantiateViewController(withIdentifier: StartViewController.storyboardIdentifier) as? StartViewController else { fatalError("Unable to instantiate an SendPicViewController from the storyboard") }
        
        controller.delegate = self
        return controller
    }
    
    func instantiateSendPicViewController(with playerId: String) -> UIViewController {
        // Instantiate a `SendPicViewController` and present it.
        
        guard let controller = storyboard?.instantiateViewController(withIdentifier: SendPicViewController.storyboardIdentifier) as? SendPicViewController else { fatalError("Unable to instantiate an SendPicViewController from the storyboard") }

        controller.playerId = playerId
        controller.delegate = self
        return controller
    }
    
    func instantiateGameViewController(with playerId: String, answer: String) -> UIViewController {
      // Instantiate a `GameViewController` and present it.
        
        guard let controller = storyboard?.instantiateViewController(withIdentifier: GameViewController.storyboardIdentifier) as? GameViewController else { fatalError("Unable to instantiate an GameViewController from the storyboard") }
    
        controller.playerId = playerId
        controller.answer = answer
        controller.dealRandomTile()
        controller.delegate = self
        return controller
   }
    
    func composeMessage(with board: Board, caption: String, session: MSSession? = nil) -> MSMessage {
        var components = URLComponents()
        components.queryItems = [URLQueryItem(name: "Answer", value: board.answer)]
        
        let layout = MSMessageTemplateLayout()
        layout.image = board.image
        layout.caption = caption
        
        let message = MSMessage(session: session ?? MSSession())
        message.url = components.url!
        message.layout = layout
        
        return message
    }
}

extension MessagesViewController: StartViewControllerDelegate {
    func startViewControllerDidPressPlay(_ controller: StartViewController) {
        /*
         The user pressed the play button to start a game.
         Change the presentation style to `.expanded`.
         */
        
        // display the SendPicView (sendPicView displays at start expand/play button click and after picture is answered correctly)
        requestPresentationStyle(.expanded)
    }
}

extension MessagesViewController: SendPicViewControllerDelegate {
    func sendPicViewController(_ controller:SendPicViewController, didGetBoard board: Board) {
        guard let conversation = activeConversation else { fatalError("Expected a conversation") }
        guard let playerId = controller.playerId else { fatalError("Expected the controller to have a player") }
        
        let message = composeMessage(with: board, caption: NSLocalizedString(playerId, comment: ""), session: conversation.selectedMessage?.session)
        
        conversation.insert(message) { error in
            if let error = error {
                print(error)
            }
        }
        dismiss()
    }
}

extension MessagesViewController: GameViewControllerDelegate {
    func presentSendPicViewController(_ controller:GameViewController) {
        guard activeConversation != nil else { fatalError("Expected a conversation") }
        guard let playerId = controller.playerId else { fatalError("Expected the controller to have a player") }

        let controller = instantiateSendPicViewController(with: playerId)
        
        for child in childViewControllers {
            child.willMove(toParentViewController: nil)
            child.view.removeFromSuperview()
            child.removeFromParentViewController()
        }
        //
        //        // Embed the new controller.
        addChildViewController(controller)
        //
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)
        
        controller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        controller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        controller.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
        controller.didMove(toParentViewController: self)
    }

}
